@model MVC.Models.DegreePlan

@{
    ViewData["Title"] = "Edit";
}

<!-- https://github.com/SortableJS/Sortable  -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sortable/0.8.0/css/sortable-theme-bootstrap.min.css" />

<!-- jsDelivr :: Sortable :: Latest (https://www.jsdelivr.com/package/npm/sortablejs) -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>

<h1>Edit</h1>

<h4>DegreePlan</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="DegreePlanId" />
            <div class="form-group">
                <label asp-for="DegreeId" class="control-label"></label>
                <select asp-for="DegreeId" class="form-control" asp-items="ViewBag.DegreeId"></select>
                <span asp-validation-for="DegreeId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StudentId" class="control-label"></label>
                <select asp-for="StudentId" class="form-control" asp-items="ViewBag.StudentId"></select>
                <span asp-validation-for="StudentId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DegreePlanAbbrev" class="control-label"></label>
                <input asp-for="DegreePlanAbbrev" class="form-control" />
                <span asp-validation-for="DegreePlanAbbrev" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DegreePlanName" class="control-label"></label>
                <input asp-for="DegreePlanName" class="form-control" />
                <span asp-validation-for="DegreePlanName" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="Done" /> @Html.DisplayNameFor(model => model.Done)
                </label>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div class="col-md-8">
    <div class="row">
        <div class="col-md-4">
            <aside id="req" class="list-group col" style="background-color: azure">
                <h2>Reqmt</h2>

                @{
                    ICollection<Requirement> plannedList = new List<Requirement>();

                    foreach (var t in Model.studentTerms.OrderBy(pt => pt.StudentTermId))
                    {
                        foreach (var tr in t.DegreePlanTermRequirements)
                        {
                            plannedList.Add(tr.Requirement);
                        }
                    }
                }

                @foreach (var r in Model.Degree.DegreeRequirements.OrderBy(dr => dr.RequirementId))
                {
                    <p class="list-group-item">@(r.RequirementName + " (" + r.RequirementId + ")")</p>
                }

            </aside>
        </div>
        <div class="col-md-8">
            @foreach (var t in Model.studentTerms.OrderBy(pt => pt.StudentTermId))
            {
                <article id="@("term" + t.StudentTermId.ToString())" class="list-group col" style="background-color: azure">
                    <h2>@(t.TermLabel + " (" + t.TermId + ")")</h2>

                    @foreach (var tr in t.DegreePlanTermRequirements)
                    {
                        var degreeRequirement = plannedList.First(dr => dr.RequirementId == tr.RequirementId);
                        <p class="list-group-item">@( degreeRequirement.RequirementAbbrev + " (" + tr.RequirementId + ")" ) </p>
                    }
                </article>
            }
        </div>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

<script>

    const reqElement = document.getElementById('req')

    const t1Element = document.getElementById('term1')
    const t2Element = document.getElementById('term2')
    const t3Element = document.getElementById('term3')
    const t4Element = document.getElementById('term4')
    const t5Element = document.getElementById('term5')
    const t6Element = document.getElementById('term6')

    new Sortable(reqElement, {
        group: {
            name: 'shared'
        },
        animation: 150,
        fallbackOnBody: true,
        swapThreshold: 0.65,
        ghostClass: 'blue-background-class'
    });

    new Sortable(t1Element, {
        group: {
            name: 'shared'
        },
        animation: 150,
        fallbackOnBody: true,
        swapThreshold: 0.65,
        ghostClass: 'blue-background-class'
    });

    new Sortable(t2Element, {
        group: {
            name: 'shared'
        },
        animation: 150,
        fallbackOnBody: true,
        swapThreshold: 0.65,
        ghostClass: 'blue-background-class'
    });

    new Sortable(t3Element, {
        group: {
            name: 'shared'
        },
        animation: 150,
        fallbackOnBody: true,
        swapThreshold: 0.65,
        ghostClass: 'blue-background-class'
    });

    new Sortable(t4Element, {
        group: {
            name: 'shared'
        },
        animation: 150,
        fallbackOnBody: true,
        swapThreshold: 0.65,
        ghostClass: 'blue-background-class'
    });

    new Sortable(t5Element, {
        group: {
            name: 'shared'
        },
        animation: 150,
        fallbackOnBody: true,
        swapThreshold: 0.65,
        ghostClass: 'blue-background-class'
    });

    new Sortable(t6Element, {
        group: {
            name: 'shared'
        },
        animation: 150,
        fallbackOnBody: true,
        swapThreshold: 0.65,
        ghostClass: 'blue-background-class'
    });

</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}